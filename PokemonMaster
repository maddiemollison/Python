class Pokemon:
    def __init__(self, name, level, experience, type, max_health, current_health, consciousness=True):
        self.name = name
        self.level = level
        self.experience = experience
        self.type = type
        self.max_health = max_health
        self.current_health = current_health
        self.consciousness = consciousness

    def __repr__(self):
        return 'This level {level} {name} (type: {type}) has {current_health} health points left.'.format(level=self.level, name=self.name, type=self.type, current_health=self.currrent_health)

    def lose_health(self, points):
        self.current_health -= points
        if self.current_health <= 0:
            self.current_health = 0
            self.knock_out()
        else:
            print('{name} now has {current_health} health.'.format(name=self.name, current_health=self.current_health))
            return self.current_health

    def gain_health(self, points):
        self.current_health += points
        if self.current_health >= self.max_health:
            self.current_health = self.max_health
        print('{name} now has {current_health} health.'.format(name=self.name, current_health=self.current_health))
        return self.current_health

    def knock_out(self):
        if self.current_health <= 0 and self.consciousness:
            self.consciousness = False
            print('{name} has been knocked out!'.format(name=self.name))
        return self.consciousness

    def revive(self):
        if self.current_health > 0 and not self.consciousness:
            self.consciousness = True
            print('{name} has been revived!'.format(name=self.name))
        return self.consciousness

    def attack(self, other_pokemon):
        if not self.consciousness:
            return '{name} cannot attack because {name} is knocked out!'.format(name=self.name)
        else:
            if self.type == 'Fire':
                if other_pokemon.type == 'Fire':
                    attack_points = 10 * self.level
                elif other_pokemon.type == 'Grass':
                    attack_points = 15 * self.level
                elif other_pokemon.type == 'Water':
                    attack_points = 5 * self.level
            elif self.type == 'Grass':
                if other_pokemon.type == 'Fire':
                    attack_points = 5 * self.level
                elif other_pokemon.type == 'Grass':
                    attack_points = 10 * self.level
                elif other_pokemon.type == 'Water':
                    attack_points = 15 * self.level
            elif self.type == 'Water':
                if other_pokemon.type == 'Fire':
                    attack_points = 15 * self.level
                elif other_pokemon.type == 'Grass':
                    attack_points = 5 * self.level
                elif other_pokemon.type == 'Water':
                    attack_points = 10 * self.level
            print('{name} attacked {other_name} and dealt {damage} damage.'.format(name=self.name, other_name=other_pokemon.name, damage=attack_points))
            other_pokemon.lose_health(attack_points)
            if other_pokemon.current_health <= 0:
                other_pokemon.knock_out()
                self.experience += 10
                print('{name} received 10 experience points. Total = {experience}'.format(name=self.name, experience=self.experience))
                if self.experience % 100 == 0:
                    self.level += 1
                    print('{name} levels up! Now at level {level}'.format(name=self.name, level=self.level))


class Trainer:
    def __init__(self, name, potions, pokemon_list, active_pokemon):
        self.name = name
        self.potions = potions
        self. pokemon_list = pokemon_list
        self.active_pokemon = active_pokemon

    def use_potion(self):
        if self.active_pokemon.current_health >= self.active_pokemon.max_health:
            pass
        else:
            self.potions -= 1
            print('{trainer} used a potion on {pokemon}.'.format(trainer=self.name, pokemon=self.active_pokemon.name))
            self.active_pokemon.gain_health(10)
            if not self.active_pokemon.consciousness and self.active_pokemon.current_health > 0:
                self.active_pokemon.revive()

    def attack_trainer(self, other_trainer):
        if not self.active_pokemon.consciousness:
            pass
        else:
            self.active_pokemon.attack(other_trainer.active_pokemon)

    def switch(self, switch_to):
        if not switch_to.consciousness:
            pass
        else:
            if switch_to in self.pokemon_list:
                self.active_pokemon = switch_to
                print('{trainer}\'s active Pokemon was switched to {pokemon}.'.format(trainer=self.name, pokemon=switch_to.name))
            else:
                print('{trainer} does not have {pokemon}.'.format(trainer=self.name, pokemon=switch_to.name))
